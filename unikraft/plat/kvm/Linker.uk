ifeq (x86_64,$(CONFIG_UK_ARCH))
KVM_LDFLAGS-y += -Wl,-m,elf_x86_64
else ifeq (arm64,$(CONFIG_UK_ARCH))
KVM_LDFLAGS-y	 += -Wl,-m,aarch64elf,-L
KVM_LINK_LIBGCC_FLAG	:= -lgcc
endif

##
## Link image
##
KVM_IMAGE := $(BUILD_DIR)/$(CONFIG_UK_NAME)_kvm-$(CONFIG_UK_ARCH)
KVM_DEBUG_IMAGE := $(KVM_IMAGE).dbg

KVM_LD_SCRIPT_FLAGS := $(addprefix -Wl$(comma)-dT$(comma),\
			 $(UK_PLAT_KVM_DEF_LDS))
KVM_LD_SCRIPT_FLAGS += $(addprefix -Wl$(comma)-T$(comma),\
			$(KVM_LD_SCRIPT-y) $(EXTRA_LD_SCRIPT-y))
KVM_ASLR_LINKER_SCRIPT := $(BUILD_DIR)/libkvmplat/link64_ASLR.lds

ifeq (y,$(CONFIG_LINK_ASLR))
$(KVM_DEBUG_IMAGE): $(KVM_ALIBS) $(KVM_ALIBS-y) $(KVM_OLIBS) $(KVM_OLIBS-y) \
		    $(UK_ALIBS) $(UK_ALIBS-y) $(UK_OLIBS) $(UK_OLIBS-y)

	$(call build_cmd,ASLR,,$@,\
		$(SCRIPTS_DIR)/ASLR/ASLR.py \
			--file_path=$(UK_PLAT_KVM_DEF_LDS) \
			--write_file=$(KVM_ASLR_LINKER_SCRIPT) \
			--libs="$(ASLR_LIBS)"\
			--banned-libs="$(ASLR_BANNED_LIBS)") 

	$(call build_cmd,LD,,$(KVM_IMAGE).ld.o,\
	       $(LD) -r $(LIBLDFLAGS) $(LIBLDFLAGS-y) \
			$(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
			-T$(KVM_ASLR_LINKER_SCRIPT)\
		     	-L$(BUILD_DIR) \
			-Wl$(comma)--start-group \
			$(KVM_ALIBS) $(KVM_ALIBS-y) \
			$(UK_ALIBS) $(UK_ALIBS-y) \
			$(KVM_LINK_LIBGCC_FLAG) \
			-Wl$(comma)--end-group \
			-o $(KVM_IMAGE).ld.o)
			
	$(call build_cmd,OBJCOPY,,$(KVM_IMAGE).o,\
		$(OBJCOPY) -w -G kvmos_* -G _libkvmplat_entry \
			$(KVM_IMAGE).ld.o $(KVM_IMAGE).o)
	
	$(call build_cmd,LD,,$@,\
	       $(LD) $(LDFLAGS) $(LDFLAGS-y) \
		     $(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
		     -T$(KVM_ASLR_LINKER_SCRIPT)\
		     -L$(BUILD_DIR) \
		      -o $@)
else
$(KVM_DEBUG_IMAGE): $(KVM_ALIBS) $(KVM_ALIBS-y) $(KVM_OLIBS) $(KVM_OLIBS-y) \
		    $(UK_ALIBS) $(UK_ALIBS-y) $(UK_OLIBS) $(UK_OLIBS-y)
	$(call build_cmd,LD,,$(KVM_IMAGE).ld.o,\
	       $(LD) -r $(LIBLDFLAGS) $(LIBLDFLAGS-y) \
			$(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
			$(KVM_OLIBS) $(KVM_OLIBS-y) \
			$(UK_OLIBS) $(UK_OLIBS-y) \
			-Wl$(comma)--start-group \
			$(KVM_ALIBS) $(KVM_ALIBS-y) \
			$(UK_ALIBS) $(UK_ALIBS-y) \
			$(KVM_LINK_LIBGCC_FLAG) \
			-Wl$(comma)--end-group \
			-o $(KVM_IMAGE).ld.o)
	$(call build_cmd,OBJCOPY,,$(KVM_IMAGE).o,\
		$(OBJCOPY) -w -G kvmos_* -G _libkvmplat_entry \
			$(KVM_IMAGE).ld.o $(KVM_IMAGE).o)
			
	$(call build_cmd,LD,,$@,\
	       $(LD) $(LDFLAGS) $(LDFLAGS-y) \
		     $(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
		     $(KVM_LD_SCRIPT_FLAGS) \
		     $(KVM_IMAGE).o -o $@)
endif

$(KVM_IMAGE): $(KVM_IMAGE).dbg
	$(call build_cmd,SCSTRIP,,$@,\
		$(SCRIPTS_DIR)/sect-strip.py \
			$(SECT_STRIP_FLAGS) $(SECT_STRIP_FLAGS-y) \
			--with-objcopy=$(OBJCOPY) \
			$< -o $@ && \
		$(STRIP) -s $@)

$(KVM_IMAGE).sym: $(KVM_DEBUG_IMAGE)
	$(call build_cmd,NM,,$@, $(NM) -n $< > $@)

$(KVM_IMAGE).gz: $(KVM_IMAGE)
	$(call build_cmd,GZ,,$@, $(GZIP) -f -9 -c $< >$@)

##
## Link loader image
##
ifeq ($(CONFIG_MEMORY_DEDUP_ASLR),y)
KVMLOADER_IMAGE := $(BUILD_DIR)/$(CONFIG_UK_NAME)_kvmloader-$(CONFIG_UK_ARCH)
KVMLOADER_DEBUG_IMAGE := $(KVMLOADER_IMAGE).dbg

KVM_LD_SCRIPT_FLAGS := $(addprefix -Wl$(comma)-dT$(comma),\
			 $(UK_PLAT_KVM_DEF_LDS))
KVM_LD_SCRIPT_FLAGS += $(addprefix -Wl$(comma)-T$(comma),\
			$(KVM_LD_SCRIPT-y) $(EXTRA_LD_SCRIPT-y))

$(KVMLOADER_DEBUG_IMAGE): $(KVMLOADER_ALIBS) $(KVMLOADER_ALIBS-y) $(KVMLOADER_OLIBS) $(KVMLOADER_OLIBS-y)
	$(call build_cmd,LD,,$(KVMLOADER_IMAGE).ld.o,\
	       $(LD) -r $(LIBLDFLAGS) $(LIBLDFLAGS-y) \
			$(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
			$(KVMLOADER_OLIBS) $(KVMLOADER_OLIBS-y) \
			-Wl$(comma)--start-group \
			$(KVMLOADER_ALIBS) $(KVMLOADER_ALIBS-y) \
			$(KVM_LINK_LIBGCC_FLAG) \
			-Wl$(comma)--end-group \
			-o $(KVMLOADER_IMAGE).ld.o)
	$(call build_cmd,OBJCOPY,,$(KVMLOADER_IMAGE).o,\
		$(OBJCOPY) -w -G kvmos_* -G _libkvmplat_entry \
			$(KVMLOADER_IMAGE).ld.o $(KVMLOADER_IMAGE).o)
	$(call build_cmd,LD,,$@,\
	       $(LD) $(LOADER_LDFLAGS) $(LOADER_LDFLAGS-y) \
		     $(KVM_LDFLAGS) $(KVM_LDFLAGS-y) \
		     $(KVM_LD_SCRIPT_FLAGS) \
		     $(KVMLOADER_IMAGE).o -o $@)

$(KVMLOADER_IMAGE): $(KVMLOADER_IMAGE).dbg
	$(call build_cmd,SCSTRIP,,$@,\
		$(SCRIPTS_DIR)/sect-strip.py \
			$(SECT_STRIP_FLAGS) $(SECT_STRIP_FLAGS-y) \
			--with-objcopy=$(OBJCOPY) \
			$< -o $@ && \
		$(STRIP) -s $@)

$(KVMLOADER_IMAGE).sym: $(KVMLOADER_DEBUG_IMAGE)
	$(call build_cmd,NM,,$@, $(NM) -n $< > $@)

$(KVMLOADER_IMAGE).gz: $(KVMLOADER_IMAGE)
	$(call build_cmd,GZ,,$@, $(GZIP) -f -9 -c $< >$@)
endif

# register images to the build
ifeq ($(CONFIG_PLAT_KVM),y)
UK_DEBUG_IMAGES-y                     += $(KVM_DEBUG_IMAGE)
UK_IMAGES-y                           += $(KVM_IMAGE)
UK_IMAGES-$(CONFIG_OPTIMIZE_SYMFILE)  += $(KVM_IMAGE).sym
UK_IMAGES-$(CONFIG_OPTIMIZE_COMPRESS) += $(KVM_IMAGE).gz

ifeq ($(CONFIG_MEMORY_DEDUP_ASLR),y)
#UK_DEBUG_IMAGES-y                     += $(KVMLOADER_DEBUG_IMAGE)
#UK_IMAGES-y                           += $(KVMLOADER_IMAGE)
#UK_IMAGES-$(CONFIG_OPTIMIZE_SYMFILE)  += $(KVMLOADER_IMAGE).sym
#UK_IMAGES-$(CONFIG_OPTIMIZE_COMPRESS) += $(KVMLOADER_IMAGE).gz

LIBKVMPLAT_CLEAN += $(call build_clean,$(KVMLOADER_IMAGE).o)
LIBKVMPLAT_CLEAN += $(call build_clean,$(KVMLOADER_IMAGE).ld.o)
endif

endif

# ...for cleaning:
LIBKVMPLAT_CLEAN += $(call build_clean,$(KVM_IMAGE).o)
LIBKVMPLAT_CLEAN += $(call build_clean,$(KVM_IMAGE).ld.o)
